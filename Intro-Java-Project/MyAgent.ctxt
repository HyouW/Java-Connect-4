#BlueJ class context
comment0.target=MyAgent
comment1.params=game\ iAmRed
comment1.target=MyAgent(Connect4Game,\ boolean)
comment1.text=\r\n\ Constructs\ a\ new\ agent,\ giving\ it\ the\ game\ and\ telling\ it\ whether\ it\ is\ Red\ or\ Yellow.\r\n\ \r\n\ @param\ game\ The\ game\ the\ agent\ will\ be\ playing.\r\n\ @param\ iAmRed\ True\ if\ the\ agent\ is\ Red,\ False\ if\ the\ agent\ is\ Yellow.\r\n
comment10.params=color
comment10.target=int\ verticalCheck(boolean)
comment11.params=color
comment11.target=int\ horizontalCheck(boolean)
comment12.params=color
comment12.target=int\ posSlopeCheck(boolean)
comment13.params=color
comment13.target=int\ negSlopeCheck(boolean)
comment14.params=
comment14.target=int\ iCanWin()
comment14.text=\r\n\ Returns\ the\ column\ that\ would\ allow\ the\ agent\ to\ win.\r\n\ \r\n\ You\ might\ want\ your\ agent\ to\ check\ to\ see\ if\ it\ has\ a\ winning\ move\ available\ to\ it\ so\ that\r\n\ it\ can\ go\ ahead\ and\ make\ that\ move.\ Implement\ this\ method\ to\ return\ what\ column\ would\r\n\ allow\ the\ agent\ to\ win.\r\n\r\n\ @return\ the\ column\ that\ would\ allow\ the\ agent\ to\ win.\r\n
comment15.params=
comment15.target=int\ theyCanWin()
comment15.text=\r\n\ Returns\ the\ column\ that\ would\ allow\ the\ opponent\ to\ win.\r\n\ \r\n\ You\ might\ want\ your\ agent\ to\ check\ to\ see\ if\ the\ opponent\ would\ have\ any\ winning\ moves\r\n\ available\ so\ your\ agent\ can\ block\ them.\ Implement\ this\ method\ to\ return\ what\ column\ should\r\n\ be\ blocked\ to\ prevent\ the\ opponent\ from\ winning.\r\n\r\n\ @return\ the\ column\ that\ would\ allow\ the\ opponent\ to\ win.\r\n
comment16.params=
comment16.target=java.lang.String\ getName()
comment16.text=\r\n\ Returns\ the\ name\ of\ this\ agent.\r\n\r\n\ @return\ the\ agent's\ name\r\n
comment2.params=
comment2.target=void\ move()
comment2.text=\r\n\ The\ move\ method\ is\ run\ every\ time\ it\ is\ this\ agent's\ turn\ in\ the\ game.\ You\ may\ assume\ that\r\n\ when\ move()\ is\ called,\ the\ game\ has\ at\ least\ one\ open\ slot\ for\ a\ token,\ and\ the\ game\ has\ not\r\n\ already\ been\ won.\r\n\ \r\n\ By\ the\ end\ of\ the\ move\ method,\ the\ agent\ should\ have\ placed\ one\ token\ into\ the\ game\ at\ some\r\n\ point.\r\n\ \r\n\ After\ the\ move()\ method\ is\ called,\ the\ game\ engine\ will\ check\ to\ make\ sure\ the\ move\ was\r\n\ valid.\ A\ move\ might\ be\ invalid\ if\:\r\n\ -\ No\ token\ was\ place\ into\ the\ game.\r\n\ -\ More\ than\ one\ token\ was\ placed\ into\ the\ game.\r\n\ -\ A\ previous\ token\ was\ removed\ from\ the\ game.\r\n\ -\ The\ color\ of\ a\ previous\ token\ was\ changed.\r\n\ -\ There\ are\ empty\ spaces\ below\ where\ the\ token\ was\ placed.\r\n\ \r\n\ If\ an\ invalid\ move\ is\ made,\ the\ game\ engine\ will\ announce\ it\ and\ the\ game\ will\ be\ ended.\r\n\ \r\n
comment3.params=columnNumber
comment3.target=void\ moveOnColumn(int)
comment3.text=\r\n\ Drops\ a\ token\ into\ a\ particular\ column\ so\ that\ it\ will\ fall\ to\ the\ bottom\ of\ the\ column.\r\n\ If\ the\ column\ is\ already\ full,\ nothing\ will\ change.\r\n\ \r\n\ @param\ columnNumber\ The\ column\ into\ which\ to\ drop\ the\ token.\r\n
comment4.params=column
comment4.target=int\ getLowestEmptyIndex(Connect4Column)
comment4.text=\r\n\ Returns\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column.\r\n\ \r\n\ @param\ column\ The\ column\ to\ check.\r\n\ @return\ the\ index\ of\ the\ top\ empty\ slot\ in\ a\ particular\ column;\ -1\ if\ the\ column\ is\ already\ full.\r\n
comment5.params=
comment5.target=int\ randomMove()
comment5.text=\r\n\ Returns\ a\ random\ valid\ move.\ If\ your\ agent\ doesn't\ know\ what\ to\ do,\ making\ a\ random\ move\r\n\ can\ allow\ the\ game\ to\ go\ on\ anyway.\r\n\ \r\n\ @return\ a\ random\ valid\ move.\r\n
comment6.params=
comment6.target=boolean\ isFirstMove()
comment6.text=\r\n\ Checks\ if\ this\ is\ MyAgent's\ first\ move\ of\ the\ game\r\n\ \r\n\ @return\ true\ if\ my\ agent\ has\ played\ no\ moves,\ false\ otherwise\r\n
comment7.params=slot\ color
comment7.target=boolean\ colorCheck(Connect4Slot,\ boolean)
comment7.text=\r\n\ Checks\ the\ color\ of\ a\ piece\r\n\ \r\n\ @param\ slot\ the\ slot\ to\ check\ for\ a\ piece\ and\ its\ color\r\n\ @param\ color\ the\ color\ to\ check\ for;\ true\ for\ red,\ false\ for\ yellow\r\n
comment8.params=slot1\ slot2\ slot3\ color
comment8.target=boolean\ match(Connect4Slot,\ Connect4Slot,\ Connect4Slot,\ boolean)
comment8.text=\r\n\ Checks\ to\ see\ if\ three\ pieces\ are\ matching\ vertically\r\n\ \r\n\ @param\ slot1\ the\ first\ slot\r\n\ @param\ slot2\ the\ second\ slot\r\n\ @param\ slot3\ the\ third\ slot\r\n\ @return\ true\ if\ \r\n
comment9.params=row
comment9.target=int\ rowCheck(int)
numComments=17
